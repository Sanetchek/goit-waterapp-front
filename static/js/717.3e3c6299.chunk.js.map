{"version":3,"file":"static/js/717.3e3c6299.chunk.js","mappings":"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","sources":["components/UserSettingsForm/UserSettingsFormSchema.js","webpack://react-homework-template/./src/components/UserSettingsForm/UserSettingsForm.module.css?3f7a","redux/user/operations.js","components/UserSettingsForm/UserSettingsForm.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const userSettingsFormSchema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Please enter your name!')\n    .min(2, 'Name must be at least 2 characters long.')\n    .max(20, 'Name must be less than 20 characters long.'),\n  email: yup\n    .string()\n    .required('Please enter your email address.')\n    .matches(/^[^@]+@[^@]+\\.[^@]+$/, 'Please enter a valid email address.')\n    .email('Invalid email.'),\n  gender: yup.string().oneOf(['woman', 'man', ''], 'Gender must be either \"woman\" or \"man\".'),\n  password: yup\n    .string()\n    .min(4, 'The passsword must contain at least 4 symbols!')\n    .max(8, 'The password must contain no more than 8 characters!'),\n  newPassword: yup\n    .string()\n    .min(4, 'The passsword must contain at least 4 symbols!')\n    .max(8, 'The password must contain no more than 8 characters!'),\n  newPasswordRepeat: yup\n    .string()\n    .min(4, 'The passsword must contain at least 4 symbols!')\n    .max(8, 'The password must contain no more than 8 characters!'),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"passwordTitle\":\"UserSettingsForm_passwordTitle__dSurm\",\"imageTitle\":\"UserSettingsForm_imageTitle__MD5jd\",\"formWrapper\":\"UserSettingsForm_formWrapper__ujyOt\",\"imageWrapper\":\"UserSettingsForm_imageWrapper__U8Q4Q\",\"image\":\"UserSettingsForm_image__+uTGC\",\"upload\":\"UserSettingsForm_upload__t9HPd\",\"imageInput\":\"UserSettingsForm_imageInput__jEiRz\",\"uploadIcon\":\"UserSettingsForm_uploadIcon__0dJZK\",\"text\":\"UserSettingsForm_text__EFO7E\",\"inputTitle\":\"UserSettingsForm_inputTitle__ESP2R\",\"genderInputWrapper\":\"UserSettingsForm_genderInputWrapper__sP33D\",\"genderButton\":\"UserSettingsForm_genderButton__Z0gIT\",\"userInroWrapper\":\"UserSettingsForm_userInroWrapper__RJtcK\",\"userInputWrap\":\"UserSettingsForm_userInputWrap__dhGBC\",\"userInputTitle\":\"UserSettingsForm_userInputTitle__stZDh\",\"userInput\":\"UserSettingsForm_userInput__0SRz+\",\"error\":\"UserSettingsForm_error__1O6VL\",\"accentText\":\"UserSettingsForm_accentText__7Kn5v\",\"iconImportant\":\"UserSettingsForm_iconImportant__OOWTR\",\"accentTextL\":\"UserSettingsForm_accentTextL__rS9Gm\",\"header\":\"UserSettingsForm_header__nswTc\",\"label\":\"UserSettingsForm_label__DuSbd\",\"formGroupPassword\":\"UserSettingsForm_formGroupPassword__yDKPK\",\"input\":\"UserSettingsForm_input__7fym4\",\"errorMessage\":\"UserSettingsForm_errorMessage__NPkUw\",\"inputWrapper\":\"UserSettingsForm_inputWrapper__mv+is\",\"buttonWrapper\":\"UserSettingsForm_buttonWrapper__gGKFi\",\"passwordToggleIcon\":\"UserSettingsForm_passwordToggleIcon__lk76R\",\"btnWrapper\":\"UserSettingsForm_btnWrapper__eG2bt\",\"placeholder\":\"UserSettingsForm_placeholder__qf4U-\",\"flexWrap\":\"UserSettingsForm_flexWrap__RvIfu\",\"settingsWrapper\":\"UserSettingsForm_settingsWrapper__cqFYn\",\"userWrapper\":\"UserSettingsForm_userWrapper__Bkg+5\",\"userSettings\":\"UserSettingsForm_userSettings__-yspq\",\"formFlexWrapper\":\"UserSettingsForm_formFlexWrapper__xqYgJ\",\"formFlexItem\":\"UserSettingsForm_formFlexItem__mnUxu\",\"passwordWrapper\":\"UserSettingsForm_passwordWrapper__ltSFO\",\"cancelButton\":\"UserSettingsForm_cancelButton__nvpjo\"};","import {\n  createAsyncThunk\n} from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Fetch user by ID\nexport const getUser = createAsyncThunk(\n  'user/getUser',\n  async (userId, thunkAPI) => {\n    try {\n      const response = await axios.get(`/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(\n        error.response?.data?.message || error.message\n      );\n    }\n  }\n);\n\n// Update user profile\nexport const updateUser = createAsyncThunk(\n  'user/updateUser',\n  async ({\n    userId,\n    userData\n  }, thunkAPI) => {\n    try {\n      const response = await axios.put(`/user/${userId}`, userData);\n      return response.data;\n    } catch (error) {\n      console.error('Update user error:', error);\n      return thunkAPI.rejectWithValue(\n        error.response?.data?.message || error.message\n      );\n    }\n  }\n);\n\n// Update avatar\nexport const updateAvatar = createAsyncThunk(\n  'user/updateAvatar',\n  async ({\n    userId,\n    avatarFile\n  }, thunkAPI) => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', avatarFile);\n\n      const response = await axios.patch(`/user/${userId}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(\n        error.response?.data?.message || error.message\n      );\n    }\n  }\n);\n","import { useEffect, useRef, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { userSettingsFormSchema } from './UserSettingsFormSchema';\nimport { toast } from 'react-hot-toast';\nimport { selectUser } from '../../redux/auth/selectors';\nimport css from './UserSettingsForm.module.css';\nimport svg from '../../assets/images/snippets.svg';\nimport { updateUser, updateAvatar } from '../../redux/user/operations';\n\nconst UserSettingsForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const currentUser = useSelector(selectUser) || {};\n  const { _id, name, email, gender, avatar } = currentUser;\n\n  const fileInputRef = useRef(null);\n  const [preview, setPreview] = useState(avatar || null); // Start with null to trigger the placeholder\n  const [showPassword, setShowPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showRepeatPassword, setShowRepeatPassword] = useState(false);\n\n  useEffect(() => {\n    if (avatar) {\n      setPreview(avatar);\n    } else {\n      setPreview(null); // Set to null if no avatar\n    }\n  }, [avatar]);\n\n  const onFileChange = useCallback(\n    async event => {\n      const selectedAvatar = event.target.files[0];\n      if (selectedAvatar) {\n        const objectURL = URL.createObjectURL(selectedAvatar);\n        setPreview(objectURL);\n        // Dispatch the updateAvatar action with userId and avatarFile\n        try {\n          await dispatch(\n            updateAvatar({ userId: _id, avatarFile: selectedAvatar })\n          );\n          toast.success('Avatar updated successfully!');\n        } catch (error) {\n          toast.error('Error updating avatar. Please try again.');\n          console.error(error);\n        }\n      }\n    },\n    [dispatch, _id] // Added _id to dependencies\n  );\n\n  const handleSubmit = async values => {\n    const filteredValues = Object.fromEntries(\n      Object.entries(values).filter(\n        ([key, value]) => value !== '' && key !== 'avatar' // Exclude specified fields - поки прибрав !['avatar', 'repeatPassword'].includes(key)\n      )\n    );\n\n    console.log(filteredValues);\n\n    // Dispatch the updateUser action with userId and filtered values\n    try {\n      await dispatch(updateUser({ userId: _id, userData: filteredValues }));\n      toast.success('User updated successfully!');\n    } catch (error) {\n      toast.error('Error updating user. Please try again.');\n      console.error(error);\n    }\n  };\n\n  const togglePasswordVisibility = setter => () => {\n    setter(prev => !prev);\n  };\n\n  // Get the first letter of the username\n  const firstLetter = name ? name.charAt(0).toUpperCase() : '';\n\n  const initialValues = {\n    name,\n    email,\n    gender: gender || 'woman',\n    oldPassword: '',\n    password: '',\n    repeatPassword: '',\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={userSettingsFormSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ setFieldValue, isSubmitting }) => (\n        <Form>\n          <div className={css.settingsWrapper}>\n            <div className={css.userWrapper}>\n              <p className={css.imageTitle}>Your Photo</p>\n              <div className={css.imageWrapper}>\n                <div className={css.imageContainer}>\n                  {preview ? (\n                    <img\n                      className={css.image}\n                      src={preview}\n                      alt=\"User avatar\"\n                      width=\"75\"\n                      height=\"75\"\n                    />\n                  ) : (\n                    <div className={css.placeholder}>{firstLetter}</div> // Placeholder block\n                  )}\n                </div>\n                <label className={css.upload}>\n                  <input\n                    className={css.imageInput}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={event => {\n                      onFileChange(event);\n                      setFieldValue('avatar', event.currentTarget.files[0]); // Set avatar in Formik values\n                    }}\n                    ref={fileInputRef}\n                  />\n                  <svg className={css.uploadIcon} width=\"18\" height=\"18\">\n                    <use xlinkHref={`${svg}#icon-upload`}></use>\n                  </svg>\n                  <p className={css.text}>Upload a photo</p>\n                </label>\n              </div>\n\n              <div className={css.formWrapper}>\n                <div>\n                  <h2 className={css.inputTitle}>Your gender identity</h2>\n                  <div className={css.genderInputWrapper}>\n                    <label className={`${css.genderButton} ${css.text}`}>\n                      <Field\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"woman\"\n                        className={css.genderInput}\n                      />\n                      Woman\n                    </label>\n\n                    <label className={`${css.genderButton} ${css.text}`}>\n                      <Field\n                        type=\"radio\"\n                        name=\"gender\"\n                        value=\"man\"\n                        className={css.genderInput}\n                      />\n                      Man\n                    </label>\n                  </div>\n                  <ErrorMessage\n                    name=\"gender\"\n                    component=\"p\"\n                    className={css.error}\n                  />\n                </div>\n\n                <div className={css.formFlexWrapper}>\n                  <div className={css.formFlexItem}>\n                    <div className={css.userInfoWrapper}>\n                      <div className={css.userInputWrap}>\n                        <label className={css.userInputTitle} htmlFor=\"name\">\n                          Your name\n                        </label>\n                        <Field\n                          type=\"text\"\n                          name=\"name\"\n                          id=\"name\"\n                          className={`${css.userInput} ${css.userSettings} ${css.text}`}\n                        />\n                        <ErrorMessage\n                          name=\"name\"\n                          component=\"p\"\n                          className={css.error}\n                        />\n                      </div>\n\n                      <div className={css.userInputWrap}>\n                        <label className={css.userInputTitle} htmlFor=\"email\">\n                          Email\n                        </label>\n                        <Field\n                          type=\"text\"\n                          name=\"email\"\n                          id=\"email\"\n                          className={`${css.userInput} ${css.userSettings} ${css.text}`}\n                        />\n                        <ErrorMessage\n                          name=\"email\"\n                          component=\"p\"\n                          className={css.error}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className={css.passwordWrapper}>\n              <h2 className={css.passwordTitle}>Password</h2>\n\n              <div className={css.formGroupPassword}>\n                <label className={css.label}>Outdated password:</label>\n                <div className={css.inputWrapper}>\n                  <Field\n                    type={showPassword ? 'text' : 'password'}\n                    name=\"oldPassword\"\n                    className={`${css.input}`}\n                    placeholder=\"Password\"\n                  />\n                  <svg\n                    className={css.passwordToggleIcon}\n                    onClick={togglePasswordVisibility(setShowPassword)}\n                    width=\"20px\"\n                    height=\"20px\"\n                  >\n                    <use\n                      xlinkHref={`${svg}#${\n                        showPassword ? 'icon-eye' : 'icon-eye-slash'\n                      }`}\n                    />\n                  </svg>\n                  <ErrorMessage\n                    name=\"oldPassword\"\n                    component=\"p\"\n                    className={css.errorMessage}\n                  />\n                </div>\n              </div>\n\n              <div className={css.formGroupPassword}>\n                <label className={css.label}>New Password:</label>\n                <div className={css.inputWrapper}>\n                  <Field\n                    type={showNewPassword ? 'text' : 'password'}\n                    name=\"password\"\n                    className={`${css.input}`}\n                    placeholder=\"Password\"\n                  />\n                  <svg\n                    className={css.passwordToggleIcon}\n                    onClick={togglePasswordVisibility(setShowNewPassword)}\n                    width=\"20px\"\n                    height=\"20px\"\n                  >\n                    <use\n                      xlinkHref={`${svg}#${\n                        showNewPassword ? 'icon-eye' : 'icon-eye-slash'\n                      }`}\n                    />\n                  </svg>\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"p\"\n                    className={css.errorMessage}\n                  />\n                </div>\n              </div>\n\n              <div className={css.formGroupPassword}>\n                <label className={css.label}>Repeat new password:</label>\n                <div className={css.inputWrapper}>\n                  <Field\n                    type={showRepeatPassword ? 'text' : 'password'}\n                    name=\"repeatPassword\"\n                    className={`${css.input}`}\n                    placeholder=\"Password\"\n                  />\n                  <svg\n                    className={css.passwordToggleIcon}\n                    onClick={togglePasswordVisibility(setShowRepeatPassword)}\n                    width=\"20px\"\n                    height=\"20px\"\n                  >\n                    <use\n                      xlinkHref={`${svg}#${\n                        showRepeatPassword ? 'icon-eye' : 'icon-eye-slash'\n                      }`}\n                    />\n                  </svg>\n                  <ErrorMessage\n                    name=\"repeatPassword\"\n                    component=\"p\"\n                    className={css.errorMessage}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className={css.buttonWrapper}>\n            <button\n              type=\"submit\"\n              className={`btn btn-blue ${css.button}`}\n              disabled={isSubmitting}\n            >\n              Save\n            </button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UserSettingsForm;\n"],"names":["userSettingsFormSchema","yup","shape","name","required","min","max","email","matches","gender","oneOf","password","newPassword","newPasswordRepeat","createAsyncThunk","async","userId","thunkAPI","axios","get","data","error","_error$response","_error$response$data","rejectWithValue","response","message","updateUser","_ref","userData","put","_error$response2","_error$response2$data","console","updateAvatar","_ref2","avatarFile","formData","FormData","append","patch","headers","_error$response3","_error$response3$data","onClose","dispatch","useDispatch","currentUser","useSelector","selectUser","_id","avatar","fileInputRef","useRef","preview","setPreview","useState","showPassword","setShowPassword","showNewPassword","setShowNewPassword","showRepeatPassword","setShowRepeatPassword","useEffect","onFileChange","useCallback","selectedAvatar","event","target","files","objectURL","URL","createObjectURL","toast","success","togglePasswordVisibility","setter","prev","firstLetter","charAt","toUpperCase","initialValues","oldPassword","repeatPassword","_jsx","Formik","validationSchema","onSubmit","filteredValues","Object","fromEntries","entries","values","filter","key","value","log","children","_ref3","setFieldValue","isSubmitting","_jsxs","Form","className","css","settingsWrapper","userWrapper","imageTitle","imageWrapper","imageContainer","image","src","alt","width","height","placeholder","upload","imageInput","type","accept","onChange","currentTarget","ref","uploadIcon","xlinkHref","svg","text","formWrapper","inputTitle","genderInputWrapper","genderButton","Field","genderInput","ErrorMessage","component","formFlexWrapper","formFlexItem","userInfoWrapper","userInputWrap","userInputTitle","htmlFor","id","userInput","userSettings","passwordWrapper","passwordTitle","formGroupPassword","label","inputWrapper","input","passwordToggleIcon","onClick","errorMessage","buttonWrapper","button","disabled"],"sourceRoot":""}